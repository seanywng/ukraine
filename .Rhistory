filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram) %>%
filter(n > 1)
bigram_months <- tf_idf_bigram_months %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 20) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Log-odds of word specificity to month") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_patchwork,
filename = paste0("./plots/bigram_months_bar",filename, ".png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
ggsave(plot = bigram_patchwork,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
bigram_months <- tf_idf_bigram_months %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 20) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
bigram_months <- tf_idf_bigram_months %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 20) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 7),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
event_type <- acled %>%
#mutate(event_type = fct_relevel(event_type,
#                                "Violence against civilians",
#                                "Explosions/Remote violence",
#                                "Strategic developments",
#                                "Battles",
#                                "Protests",
#                                "Riots")) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode1_shape, size = 0.5, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
library(profvis)
library(scales)
library(plotly)
library(sf)
library(flextable)
library(gganimate)
library(viridis)
`%out%` <- Negate(`%in%`)
theme_set(theme_light())
clean_acled <- function(tbl){
tbl %>%
filter(country == "Ukraine") %>%
mutate(inter_type = interaction,
inter_type = recode_factor(inter_type,
`10` = "SOLE	MILITARY ACTION",
`11` = "MILITARY VERSUS MILITARY",
`12` = "MILITARY VERSUS REBELS",
`13` = "MILITARY VERSUS POLITICAL MILITIA",
`14` = "MILITARY VERSUS COMMUNAL MILITIA",
`15` = "MILITARY VERSUS RIOTERS",
`16` = "MILITARY VERSUS PROTESTERS",
`17` = "MILITARY VERSUS CIVILIANS",
`18` = "MILITARY VERSUS OTHER",
`20` = "SOLE REBEL ACTION",
`22` = "REBELS VERSUS REBELS",
`23` = "REBELS	VERSUS POLITICAL MILIITA ",
`24` = "REBELS VERSUS COMMUNAL MILITIA",
`25` = "REBELS VERSUS RIOTERS",
`26` = "REBELS VERSUS PROTESTERS ",
`27` = "REBELS VERSUS CIVILIANS",
`28` = "REBELS VERSUS OTHERS",
`30` = "SOLE POLITICAL MILITIA ACTION",
`33` = "POLITICAL MILITIA VERSUS POLITICAL	MILITIA",
`34` = "POLITICAL MILITIA VERSUS COMMUNAL	MILITIA",
`35` = "POLITICAL MILITIA VERSUS RIOTERS",
`36` = "POLITICAL MILITIA VERSUS PROTESTERS",
`37` = "POLITICAL MILITIA VERSUS CIVILIANS",
`38` = "POLITICAL MILITIA VERSUS OTHERS",
`40` = "SOLE COMMUNAL MILITIA ACTION",
`44` = "COMMUNAL MILITIA VERSUS COMMUNAL MILITIA",
`45` = "COMMUNAL MILITIA VERSUS RIOTERS",
`46` = "COMMUNAL	MILITIA	VERSUS PROTESTERS ",
`47` = "COMMUNAL MILITIA VERSUS CIVILIANS",
`48` = "COMMUNAL MILITIA VERSUS OTHER",
`50` = "SOLE RIOTER ACTION",
`55` = "RIOTERS VERSUS RIOTERS",
`56` = "RIOTERS VERSUS PROTESTERS",
`57` = "RIOTERS VERSUS CIVILIANS",
`58` = "RIOTERS VERSUS OTHERS",
`60` = "SOLE PROTESTER ACTION",
`66` = "PROTESTERS VERSUS PROTESTERS",
`67` = "PROTESTERS VERSUS CIVILIANS",
`68` = "PROTESTERS VERSUS OTHER",
`78` = "OTHER ACTOR VERSUS CIVILIANS",
`80` = "SOLE OTHER ACTION"),
inter_type = tolower(str_trim(str_replace_all(inter_type, "[\\r\\n\\t]+", " ")))) %>%
mutate(event_date = dmy(event_date)) %>%
mutate(has_fatalities = ifelse(fatalities > 0, TRUE, FALSE)) %>%
mutate(month = lubridate::month(event_date, label = TRUE)) %>%
# Unclear if this works for Ukraine
mutate(non_combatant = case_when(event_type == "Violence against civilians" ~ TRUE,
str_detect(inter_type, "civilian|protester") ~ TRUE,
str_detect(notes, "civilian|protester|villager") ~ TRUE,
TRUE ~ FALSE)) %>%
rename(id = data_id)
}
acled <- read_csv("./data/2014-01-01-2023-01-05-Russia-Ukraine_acled.csv") %>%
clean_acled() %>%
# Moving the date filter out of the cleanin function
filter(event_date >= "2022-01-01" & event_date < "2023-01-01")
event_type <- acled %>%
#mutate(event_type = fct_relevel(event_type,
#                                "Violence against civilians",
#                                "Explosions/Remote violence",
#                                "Strategic developments",
#                                "Battles",
#                                "Protests",
#                                "Riots")) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode1_shape, size = 0.5, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
pcode1_shape <- st_read("./ukr_adm_sspe_20221005_em/ukr_admbnda_adm1_sspe_20221005.shp",
quiet = TRUE)
pcode2_shape <- st_read("./ukr_adm_sspe_20221005_em/ukr_admbnda_adm2_sspe_20221005.shp",
quiet = TRUE)
event_type <- acled %>%
#mutate(event_type = fct_relevel(event_type,
#                                "Violence against civilians",
#                                "Explosions/Remote violence",
#                                "Strategic developments",
#                                "Battles",
#                                "Protests",
#                                "Riots")) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode2_shape, size = 0.5, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
# You might want to lower the duration
animate(event_type, height = 1748, width = 2480, res = 150, duration = 20)
anim_save("./plots/event_type_2022.gif")
event_type <- acled %>%
#mutate(event_type = fct_relevel(event_type,
#                                "Violence against civilians",
#                                "Explosions/Remote violence",
#                                "Strategic developments",
#                                "Battles",
#                                "Protests",
#                                "Riots")) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode2_shape, size = 0.1, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
# You might want to lower the duration
animate(event_type, height = 1748, width = 2480, res = 150, duration = 20)
anim_save("./plots/event_type_2022.gif")
event_type <- acled %>%
mutate(event_type = ifelse(event_type == "Protests" |
event_type == "Riots",
"Protests & riots")) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode2_shape, size = 0.1, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
event_type <- acled %>%
mutate(event_type = ifelse(event_type == "Protests" | event_type == "Riots",
"Protests & riots",
event_type)) %>%
mutate(month = floor_date(event_date, "month")) %>%
mutate(month = map(month, ~ seq.Date(as.Date(.),
as.Date("2022/12/31"),
by = "month"))) %>%
unnest(month) %>%
mutate(month = format_ISO8601(month, precision = "ymd")) %>%
ggplot() +
geom_sf(data = pcode2_shape, size = 0.1, colour = "black",
alpha = 0) +
geom_point(aes(x = longitude,
y = latitude,
colour = factor(event_type),
size = fatalities)) +
# Try and figure out why scale_colour_manual doesn't work
#scale_colour_manual(values = c("#D95F02", "#7570B3", "#1B9E77", "#E7298A",
#                               "#E6AB02", "#00AFBB", "#666666", "#A6761D", "#66A61E")) +
theme_void() +
guides(colour = guide_legend(override.aes = list(size = 5), order = 1)) +
theme(legend.text = element_text(size = 11),
legend.title = element_text(face = "bold"),
plot.caption = element_text(hjust = 0.5)) +
transition_manual(month) +
labs(title = "Types of conflict events as of { current_frame }",
caption = "Data source: Armed Conflict Location & Event Data Project; acleddata.com",
colour = "Event type",
size = "Fatalities")
# You might want to lower the duration
animate(event_type, height = 1748, width = 2480, res = 150, duration = 20)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
library(tidylo)
library(DT)
`%out%` <- Negate(`%in%`)
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
theme_set(theme_light())
ukr_links <- read_csv("./data/reliefweb_ukr_links.csv") %>%
rename(url = value) %>%
mutate(id = row_number())
# This is the list of Spanish and French links
to_remove <- read_csv("./data/links_to_remove.csv") %>%
rename(url = value) %>%
pull(url)
rw <- read_csv("./data/scraped_full_20230101_20220101.csv") %>%
mutate(date = dmy(date),
month = month(date)) %>%
left_join(ukr_links, by = c("link" = "url")) %>%
filter(link %out% to_remove)
tf_idf_bigrams <- bigrams %>%
count(id, bigram) %>%
bind_tf_idf(bigram, id, n) %>%
bind_log_odds(bigram, id, n) %>%
arrange(desc(tf_idf)) %>%
left_join(rw %>%
select(id, source),
by = "id") %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram)
bigrams <- rw %>%
# You're filtering out one clump here
# filter(source %out% c("IAEA", "ACLED")) %>%
select(source, id, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
mutate(word = str_remove_all(word1, " \\'s"),
word2 = str_remove_all(word2, "\\'s")) %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
filter(!str_detect(word, "\\.(com|org|edu|gov)") &
!str_detect(word2, "\\.(com|org|edu|gov)")) %>%
unite(bigram, word1, word2, sep = " ")
tf_idf_bigrams <- bigrams %>%
count(id, bigram) %>%
bind_tf_idf(bigram, id, n) %>%
bind_log_odds(bigram, id, n) %>%
arrange(desc(tf_idf)) %>%
left_join(rw %>%
select(id, source),
by = "id") %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram)
save_bigrams <- function(df, filename) {
bigram_patchwork <- df %>%
group_by(word) %>%
slice_max(tf, n = 1) %>%
ungroup() %>%
arrange(desc(tf)) %>%
head(20) %>%
ggplot(aes(x = tf,
y = fct_reorder(word, tf, .fun = sum)))+
geom_col(show.legend = FALSE,
fill = "cornflowerblue") +
labs(x = "Term frequency", y = "",
title = paste0("Term frequency: ", filename),
subtitle = "2022-01-01 to 2023-01-01") +
df %>%
group_by(word) %>%
slice_max(tf_idf, n = 1) %>%
ungroup() %>%
arrange(desc(tf_idf)) %>%
head(20) %>%
ggplot(aes(x = tf_idf,
y = fct_reorder(word, tf_idf, .fun = sum)))+
geom_col(show.legend = FALSE,
fill = "tomato") +
labs(x = "Tf-idf", y = "",
title = paste0("Tf-idf: ", filename),
subtitle = "2022-01-01 to 2023-01-01") +
df %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(word) %>%
slice_max(log_odds_weighted, n = 1) %>%
ungroup() %>%
arrange(desc(log_odds_weighted)) %>%
head(20) %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted, .fun = sum)))+
geom_col(show.legend = FALSE,
fill = "forestgreen") +
labs(x = "Log odds", y = "",
title = paste0("Log odds: ", filename),
subtitle = "2022-01-01 to 2023-01-01")
ggsave(plot = bigram_patchwork,
filename = paste0("./plots/bigram_source_filter1/",filename, ".png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
}
more_than_5 <- rw %>%
count(source, sort = TRUE) %>%
filter(n >= 5) %>%
pull(source)
# Throws an error, but still works
# This error occurs when you ask R to overwrite an existing file
tf_idf_bigrams %>%
filter(source %in% more_than_5) %>%
nest(-source) %$%
walk2(data, source, save_bigrams)
