tf_idf_bigrams_odds <- bigrams %>%
count(source, bigram) %>%
bind_tf_idf(bigram, source, n) %>%
bind_log_odds(bigram, source, n) %>%
arrange(desc(tf_idf)) %>%
rename(word = bigram) %>%
add_count(word, wt = n, name = "word_total") %>%
group_by(source) %>%
mutate(max_log_odds_weighted =
max(log_odds_weighted[!is.infinite(log_odds_weighted)], na.rm = TRUE)) %>%
mutate(log_odds_weighted = ifelse(is.infinite(log_odds_weighted),
max(max_log_odds_weighted),
log_odds_weighted)) %>%
ungroup() %>%
filter(n > 1) %>%
left_join(bigrams %>% select(source, word = bigram, id),
by = c("source" = "source", "word" = "word"))
tf_idf_bigrams_odds
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 50) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 50) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 50) %>%
ungroup()
) %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, count = n, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(count), desc(tf_idf)) %>%
select(source, bigram = word, count, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 50) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 50) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 50) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, count = n, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(count), desc(tf_idf)) %>%
select(source, bigram = word, count, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 30) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(count), desc(tf_idf)) %>%
select(source, bigram = word, count, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 30) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(count), desc(tf_idf)) %>%
select(source, bigram = word, count = n, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 30) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(count = n), desc(tf_idf)) %>%
select(source, bigram = word, count, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 30) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 30) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(n), desc(tf_idf)) %>%
select(source, bigram = word, count = n, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 20) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 20) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 20) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(n), desc(tf_idf)) %>%
select(source, bigram = word, count = n, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
ind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 20) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 20) %>%
ungroup()
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 20) %>%
distinct(id, word, .keep_all = TRUE)
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 20) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 2)
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 2) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 3) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 4) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
distinct(id, word, .keep_all = TRUE) %>%
ungroup()
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
group_by(source, word) %>%
top_n(1)
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 5) %>%
filter(!is.infinite(log_odds_weighted)) %>%
distinct(source, word, .keep_all = TRUE)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 10) %>%
filter(!is.infinite(log_odds_weighted)) %>%
distinct(source, word, .keep_all = TRUE) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 20) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 20) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(n), desc(tf_idf)) %>%
select(source, bigram = word, count = n, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
rbind(
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
add_count(word, wt = n, name = "word_total") %>%
filter(word_total > 10) %>%
filter(!is.infinite(log_odds_weighted)) %>%
distinct(source, word, .keep_all = TRUE) %>%
group_by(source) %>%
slice_max(log_odds_weighted, n = 10) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf, n = 20) %>%
ungroup(),
tf_idf_bigrams_odds %>%
filter(source %in% more_than_5) %>%
group_by(source) %>%
slice_max(tf_idf, n = 20) %>%
ungroup()
) %>%
left_join(rw %>%
select(id, link, body),
by = "id") %>%
mutate(body = str_sub(body, 1, 150)) %>%
distinct(word, id, source, tf_idf, .keep_all = TRUE) %>%
arrange(desc(n), desc(tf_idf)) %>%
select(source, bigram = word, count = n, `text (1st 150 char)` = body, link, -tf_idf) %>%
datatable(filter = list(position = "top", clear = TRUE),
options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = "80px", targets = 1:3),
list(width = "180px", targets = 4),
list(width = "100px", targets = 5)),
search = list(regex = TRUE)
,
initComplete = htmlwidgets::JS(
"function(settings, json) {",
paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
"}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Bigram search helper")
)
