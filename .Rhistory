left_join(ukr_links, by = c("link" = "url")) %>%
filter(link %out% to_remove) %>%
filter(type %out% c("News and Press Release"))
hum_sector <- read_csv("./data/scraped_full_20230101_20220101.csv") %>%
mutate(date = dmy(date),
month = month(date)) %>%
left_join(ukr_links, by = c("link" = "url")) %>%
filter(link %out% to_remove) %>%
filter(type %out% c("News and Press Release",
"Map",
"Appeal")) %>%
separate_rows(theme, sep = "\n") %>%
mutate(sector = tolower(theme)) %>%
select(-theme) %>%
mutate(org_type =
case_when(
source %in%
c("OCHA", "UNHCR", "UNICEF", "IOM",
"WHO", "WFP", "OHCHR", "IAEA",
"UNFPA", "UN SG", "FAO", "UN SC",
"UN HRC", "UNCT Ukraine", "UN News",
"UN RC/HC Ukraine", "World Bank", "UNDP",
"UN GA", "UN DGC", "UN Women", "UN DPPA",
"Security Council Report", "UNOPS", "UNAIDS",
"UNESCO", "ILO", "UNCRC", "UNODA") ~ "UN",
str_detect(source, "Govt.") |
source %in% c("USAID", "EC", "ECHO",
"EIB", "OSCE")~ "Govts",
str_detect(source, "Cluster") |
source %in% c("ETC") ~ "Clusters",
TRUE ~ "NGOs"))
# ukr <- rw %>%
#   filter(type %out% c("News and Press Release",
#                       "Map",
#                       "Appeal"))
set.seed(2023)
hum %>%
filter(source %out% c("ACLED", "OSCE", "IAEA")) %>%
select(id, title) %>%
unnest_tokens(word, title) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(nchar(word) < 20) %>%
filter(word %out% c(tolower(month.name), "reporting", "period")) %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n >= 20) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "cyan4") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 4,
point.padding = unit(0.2, "lines")) +
labs(title = "Word pairs in Reliefweb Ukraine article titles",
subtitle = "2022-01-01 to 2023-01-01")
ggsave("./plots/ukr_title_network_graph.png", width = 42, height = 29.7,
units = "cm", dpi = 400)
set.seed(2023)
word_pair_network_graph <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
# filter(word %out% words_to_remove) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n > 130) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "kk") +
geom_edge_link(aes(edge_alpha = n/2, edge_width = n), edge_colour = "tomato") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void() +
labs(title = "Most common word pairs in Reliefweb article text on Ukraine",
subtitle = "2022-01-01 to 2023-01-01; lines show number of co-occurences",
edge_width = "") +
# Removing the legends for edge width and edge alpha
guides(edge_alpha = "none",
edge_width = "none") +
theme(plot.background = element_rect(fill = "white"))
words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
# filter(word %out% words_to_remove) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n > 130) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "kk") +
geom_edge_link(aes(edge_alpha = n/2, edge_width = n), edge_colour = "tomato") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
# filter(word %out% words_to_remove) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n > 130)
words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE,
fig.show = "hold")
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
# library(DT)
library(readxl)
library(flextable)
library(viridis)
library(scales)
`%out%` <- Negate(`%in%`)
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
theme_set(theme_light())
options(scipen = 100)
word_pair_network_graph <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
# filter(word %out% words_to_remove) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n > 130) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "kk") +
geom_edge_link(aes(edge_alpha = n/2, edge_width = n), edge_colour = "tomato") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void() +
labs(title = "Most common word pairs in Reliefweb article text on Ukraine",
subtitle = "2022-01-01 to 2023-01-01; lines show number of co-occurences",
edge_width = "") +
# Removing the legends for edge width and edge alpha
guides(edge_alpha = "none",
edge_width = "none") +
theme(plot.background = element_rect(fill = "white"))
words
words %>% glimpse()
words <- hum %>%
select(id, source, body) %>%
filter(source %out% c("ACLED", "OSCE", "IAEA")) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(nchar(word) < 20) %>%
filter(word %out% c(tolower(month.name), "reporting", "period")) %>%
filter(!str_detect(word, "\\.(com|org|edu|gov)")) %>%
filter(str_detect(word, "[a-z]"))
set.seed(2023)
word_pair_network_graph <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
# filter(word %out% words_to_remove) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n > 130) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "kk") +
geom_edge_link(aes(edge_alpha = n/2, edge_width = n), edge_colour = "tomato") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void() +
labs(title = "Most common word pairs in Reliefweb article text on Ukraine",
subtitle = "2022-01-01 to 2023-01-01; lines show number of co-occurences",
edge_width = "") +
# Removing the legends for edge width and edge alpha
guides(edge_alpha = "none",
edge_width = "none") +
theme(plot.background = element_rect(fill = "white"))
ggsave(word_pair_network_graph,
filename = "./plots/word_pair_network_graph_v2.png",
dpi = 400, width = 16.5, height = 11.7, units = "in")
ukr %>%
# filter(source %out% c("IAEA", "ACLED", "OSCE")) %>%
select(id, month, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram) %>%
filter(n > 1) %>%
ungroup() %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 16) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 9, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ukr <- rw %>%
filter(type %out% c("News and Press Release",
"Map",
"Appeal"))
ukr %>%
# filter(source %out% c("IAEA", "ACLED", "OSCE")) %>%
select(id, month, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram) %>%
filter(n > 1) %>%
ungroup() %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 16) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 9, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
bigram_months <- ukr %>%
# filter(source %out% c("IAEA", "ACLED", "OSCE")) %>%
select(id, month, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance")) %>%
rename(word = bigram) %>%
filter(n > 1) %>%
ungroup() %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 16) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 9, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
bigram_months <- ukr %>%
# filter(source %out% c("IAEA", "ACLED", "OSCE")) %>%
select(id, month, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance",
"european time", "p.m eet",
"recently reported", "eastern european")) %>%
rename(word = bigram) %>%
filter(n > 1) %>%
ungroup() %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 16) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 9, face = "bold"),
strip.background = element_rect(fill = "#212121"))
bigram_months <- ukr %>%
# filter(source %out% c("IAEA", "ACLED", "OSCE")) %>%
select(id, month, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(month, bigram) %>%
bind_tf_idf(bigram, month, n) %>%
bind_log_odds(bigram, month, n) %>%
arrange(desc(tf_idf)) %>%
filter(bigram %out% c("million people", "humanitarian assistance",
"european time", "p.m eet",
"recently reported", "eastern european",
"pm kyiv")) %>%
rename(word = bigram) %>%
filter(n > 1) %>%
ungroup() %>%
filter(!is.infinite(log_odds_weighted)) %>%
mutate(month = factor(month.abb[month],levels = month.abb)) %>%
group_by(month) %>%
arrange(desc(log_odds_weighted), desc(tf_idf)) %>%
mutate(rank = row_number()) %>%
filter(rank <= 16) %>%
ungroup() %>%
ggplot(aes(x = log_odds_weighted,
y = fct_reorder(word, log_odds_weighted),
fill = month)) +
geom_col(show.legend = FALSE) +
scale_fill_viridis_d() +
facet_wrap(~ month, scales = "free") +
labs(x = "Log-odds",
y = "",
title = "Reliefweb Ukraine articles: log-odds of word specificity by month",
subtitle = "A year of humanitarian rhetoric") +
theme(legend.position = "none",
axis.text.x = element_text(size = 5, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 8),
strip.text = element_text(size = 9, face = "bold"),
strip.background = element_rect(fill = "#212121"))
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
ggsave(plot = bigram_months,
filename = paste0("./plots/bigram_months_bar.png"),
device = "png",
dpi = 300, height = 11, width = 14, units = "in")
words_search <- read_csv("./data/words_search.csv")
words_search
words_search %>%
filter(word %out% c("pending", "receipt", "delayed",
"corrobration", "corrobration")) %>%
distinct(id, word) %>%
add_count(word) %>%
filter(n >= 100) %>%
pairwise_cor(word, id, sort = TRUE, upper =TRUE) %>%
rename(word = item1, match = item2) %>%
group_by(word) %>%
top_n(correlation, n = 20) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE,
search = list(regex = TRUE)
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Pairwise correlations in Reliefweb Ukraine articles")
) %>%
formatRound(c("correlation"), digits = 3)
words_search %>%
filter(word %out% c("pending", "receipt", "delayed",
"corrobration", "corrobration")) %>%
distinct(id, word) %>%
add_count(word) %>%
filter(n >= 100) %>%
pairwise_cor(word, id, sort = TRUE, upper = FALSE) %>%
rename(word = item1, match = item2) %>%
group_by(word) %>%
top_n(correlation, n = 20) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE,
search = list(regex = TRUE)
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Pairwise correlations in Reliefweb Ukraine articles")
) %>%
formatRound(c("correlation"), digits = 3)
words_search %>%
filter(word %out% c("pending", "receipt", "delayed",
"corrobration", "corrobration")) %>%
distinct(id, word) %>%
add_count(word) %>%
filter(n >= 100) %>%
pairwise_cor(word, id, sort = TRUE, lower = FALSE) %>%
rename(word = item1, match = item2) %>%
group_by(word) %>%
top_n(correlation, n = 20) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE,
search = list(regex = TRUE)
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Pairwise correlations in Reliefweb Ukraine articles")
) %>%
formatRound(c("correlation"), digits = 3)
words_search %>%
filter(word %out% c("pending", "receipt", "delayed",
"corrobration", "corrobration")) %>%
distinct(id, word) %>%
add_count(word) %>%
filter(n >= 100) %>%
pairwise_cor(word, id, sort = TRUE, upper = FALSE) %>%
rename(word = item1, match = item2) %>%
group_by(word) %>%
top_n(correlation, n = 20) %>%
datatable(filter = list(position = "top", clear = FALSE),
options = list(pageLength = 10, scrollX = TRUE,
search = list(regex = TRUE)
#
#                         ,
#                                         initComplete = htmlwidgets::JS(
#        "function(settings, json) {",
#        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
#        "}")
),
caption = htmltools::tags$caption(style = 'caption-side: top;
text-align: center;
color:black; font-size:140% ;',
"Pairwise correlations in Reliefweb Ukraine articles")
) %>%
formatRound(c("correlation"), digits = 3)
install.packages("installer")
install.packages("installer")
install.packages("installr")
