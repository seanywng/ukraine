geom_edge_link(aes(alpha = correlation),
colour = "blue",
check_overlap = TRUE) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "blue", alpha = .1) +
geom_node_text(aes(label = name), size = 2,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of Reliefweb bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: https://reliefweb.int/")
create_bigrams(rw)
network_graph <- bigrams %>%
filter(bigram %out% c("million people",
"internally displaced",
"united nations",
"human rights",
"humanitarian assistance",
"february 2022")) %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 50) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .3) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "stress") +
geom_edge_link(aes(alpha = correlation),
colour = "blue",
check_overlap = TRUE) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "blue", alpha = .1) +
geom_node_text(aes(label = name), size = 2,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of Reliefweb bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: https://reliefweb.int/")
bigrams_raw <- tbl %>%
select(id, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
library(profvis)
`%out%` <- Negate(`%in%`)
library(scales)
library(plotly)
clean_acled <- function(tbl){
tbl %>%
filter(country == "Ukraine") %>%
mutate(inter_type = interaction,
inter_type = recode_factor(inter_type,
`10` = "SOLE	MILITARY ACTION",
`11` = "MILITARY VERSUS MILITARY",
`12` = "MILITARY VERSUS REBELS",
`13` = "MILITARY VERSUS POLITICAL MILITIA",
`14` = "MILITARY VERSUS COMMUNAL MILITIA",
`15` = "MILITARY VERSUS RIOTERS",
`16` = "MILITARY VERSUS PROTESTERS",
`17` = "MILITARY VERSUS CIVILIANS",
`18` = "MILITARY VERSUS OTHER",
`20` = "SOLE REBEL ACTION",
`22` = "REBELS VERSUS REBELS",
`23` = "REBELS	VERSUS POLITICAL MILIITA ",
`24` = "REBELS VERSUS COMMUNAL MILITIA",
`25` = "REBELS VERSUS RIOTERS",
`26` = "REBELS VERSUS PROTESTERS ",
`27` = "REBELS VERSUS CIVILIANS",
`28` = "REBELS VERSUS OTHERS",
`30` = "SOLE POLITICAL MILITIA ACTION",
`33` = "POLITICAL MILITIA VERSUS POLITICAL	MILITIA",
`34` = "POLITICAL MILITIA VERSUS COMMUNAL	MILITIA",
`35` = "POLITICAL MILITIA VERSUS RIOTERS",
`36` = "POLITICAL MILITIA VERSUS PROTESTERS",
`37` = "POLITICAL MILITIA VERSUS CIVILIANS",
`38` = "POLITICAL MILITIA VERSUS OTHERS",
`40` = "SOLE COMMUNAL MILITIA ACTION",
`44` = "COMMUNAL MILITIA VERSUS COMMUNAL MILITIA",
`45` = "COMMUNAL MILITIA VERSUS RIOTERS",
`46` = "COMMUNAL	MILITIA	VERSUS PROTESTERS ",
`47` = "COMMUNAL MILITIA VERSUS CIVILIANS",
`48` = "COMMUNAL MILITIA VERSUS OTHER",
`50` = "SOLE RIOTER ACTION",
`55` = "RIOTERS VERSUS RIOTERS",
`56` = "RIOTERS VERSUS PROTESTERS",
`57` = "RIOTERS VERSUS CIVILIANS",
`58` = "RIOTERS VERSUS OTHERS",
`60` = "SOLE PROTESTER ACTION",
`66` = "PROTESTERS VERSUS PROTESTERS",
`67` = "PROTESTERS VERSUS CIVILIANS",
`68` = "PROTESTERS VERSUS OTHER",
`78` = "OTHER ACTOR VERSUS CIVILIANS",
`80` = "SOLE OTHER ACTION"),
inter_type = tolower(str_trim(str_replace_all(inter_type, "[\\r\\n\\t]+", " ")))) %>%
mutate(event_date = dmy(event_date)) %>%
mutate(has_fatalities = ifelse(fatalities > 0, TRUE, FALSE)) %>%
mutate(month = lubridate::month(event_date, label = TRUE)) %>%
# Unclear if this works for Ukraine
mutate(non_combatant = case_when(event_type == "Violence against civilians" ~ TRUE,
str_detect(inter_type, "civilian|protester") ~ TRUE,
str_detect(notes, "civilian|protester|villager") ~ TRUE,
TRUE ~ FALSE)) %>%
rename(id = data_id)
}
acled <- read_csv("./data/2014-01-01-2023-01-05-Russia-Ukraine_acled.csv") %>%
clean_acled() %>%
# Moving the date filter out of the cleanin function
filter(event_date >= "2022-01-01" & event_date < "2023-01-01")
acled_bigrams <- acled %>%
select(id, notes) %>%
unnest_tokens(bigram, notes, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ")
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 3,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_fan(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .15) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(tidyverse)
library(lubridate)
library(magrittr)
theme_set(theme_light())
scrape_page <- function(link) {
page <- read_html(link)
scraped <- tibble()
title <- page %>%
html_nodes(".rw-page-title") %>%
html_text2()
type <- page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--simple") %>%
html_text2()
body <- page %>%
html_nodes(".rw-report__content p") %>%
html_text2() %>%
toString()
source <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-link") %>%
html_text2()
date <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--published time") %>%
html_text2()
theme <- page %>%
html_nodes(".rw-entity-meta__tag-value--theme") %>%
html_text2()
link <- link
rbind(scraped,
tibble(title, type, source, theme, date, body, link))
}
yem_links <- read_csv("/data/reliefweb_yem_links.csv")
yem_links <- read_csv("./data/reliefweb_yem_links.csv")
yem_a1 <- yem_links[1:200]
yem_links <- yem_links %>%
rename(url = value) %>%
pull(url)
yem_a1 <- yem_links[1:200]
yem_a_scraped <- yem_a1 %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a_scraped
yem_a_scraped %>%
group_by(link) %>%
slice_max(1) %>%
ungroup()
yem_a_scraped
yem_a_scraped %>%
group_by(link)
yem_a_scraped %>%
group_by(link) %>%
slice_max(1)
yem_a_scraped %>%
group_by(link) %>%
slice_head(1) %>%
ungroup()
yem_a_scraped %>%
group_by(link) %>%
slice_head(n = 1) %>%
ungroup()
yem_a_scraped %>%
group_by(link) %>%
slice(1) %>%
ungroup()
yem_a2 <- yem_links[201:300]
yem_a1_scraped <- yem_a_scraped
yem_a2_scraped <- yem_a2 %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a2_scraped <- yem_links[201:250] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a2_scraped <- yem_links[201:225] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[225:235] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[235:240] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[240:245] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[245:246] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[245:247] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[248] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[249] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[250] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links[251:260] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a1 <- yem_a1[-c(249, 250)]
yem_a1_scraped
yem_a <- yem_links[1:400]
yem_a <- yem_a1[-c(249, 250)]
yem_a_scraped <- yem_a %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b <- yem_links[401:800]
yem_b_scraped <- yem_b %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b <- yem_links[401:800]
yem_b[1:200] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
scrape_page <- function(link) {
page <- read_html(link)
scraped <- tibble()
title <- page %>%
html_nodes(".rw-page-title") %>%
html_text2()
type <- page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--simple") %>%
html_text2()
body <- page %>%
html_nodes(".rw-report__content p") %>%
html_text2() %>%
toString()
source <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-link") %>%
html_text2()
date <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--published time") %>%
html_text2()
theme <- page %>%
html_nodes(".rw-entity-meta__tag-value--theme") %>%
html_text2()
link <- link
rbind(scraped,
tibble(title, type, source, theme, date, body, link))
Sys.sleep(.1)
}
yem_b[1:100] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
scrape_page <- function(link) {
page <- read_html(link)
scraped <- tibble()
title <- page %>%
html_nodes(".rw-page-title") %>%
html_text2()
type <- page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--simple") %>%
html_text2()
body <- page %>%
html_nodes(".rw-report__content p") %>%
html_text2() %>%
toString()
source <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-link") %>%
html_text2()
date <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--published time") %>%
html_text2()
theme <- page %>%
html_nodes(".rw-entity-meta__tag-value--theme") %>%
html_text2()
link <- link
rbind(scraped,
tibble(title, type, source, theme, date, body, link))
}
scrape_page <- function(link) {
Sys.sleep(0.5)
page <- read_html(link)
scraped <- tibble()
title <- page %>%
html_nodes(".rw-page-title") %>%
html_text2()
type <- page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--simple") %>%
html_text2()
body <- page %>%
html_nodes(".rw-report__content p") %>%
html_text2() %>%
toString()
source <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-link") %>%
html_text2()
date <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--published time") %>%
html_text2()
theme <- page %>%
html_nodes(".rw-entity-meta__tag-value--theme") %>%
html_text2()
link <- link
rbind(scraped,
tibble(title, type, source, theme, date, body, link))
}
yem_b[1:100] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
scrape_page <- function(link) {
Sys.sleep(1)
page <- read_html(link)
scraped <- tibble()
title <- page %>%
html_nodes(".rw-page-title") %>%
html_text2()
type <- page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--simple") %>%
html_text2()
body <- page %>%
html_nodes(".rw-report__content p") %>%
html_text2() %>%
toString()
source <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-link") %>%
html_text2()
date <-  page %>%
html_nodes(".rw-article__header--with-meta .rw-entity-meta__tag-value--published time") %>%
html_text2()
theme <- page %>%
html_nodes(".rw-entity-meta__tag-value--theme") %>%
html_text2()
link <- link
rbind(scraped,
tibble(title, type, source, theme, date, body, link))
}
yem_b[101:200] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[101:150] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[101:110] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[101] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[102] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[102] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[103] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[104] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[103] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[105] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[106] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[107] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_b[108] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_links <- yem_links %>%
rename(url = value) %>%
pull(url) %>%
yem_a <- yem_links[1:400]
yem_a <- yem_links[1:400]
yem_a <- yem_a[-c(249, 250)]
yem_a_scraped <- yem_a %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[]396%>%
yem_a[396]%>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a <- yem_links[1:400]
yem_a <- yem_a[-c(249, 250, 396)]
yem_a[108] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[396]%>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a <- yem_links[1:400]
yem_a <- yem_a[-c(249, 250, 396)]
yem_a_scraped <- yem_a %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[395] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[396] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a <- yem_links[1:400]
yem_a[396] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[397] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[396] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[395] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[249] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[250] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[394] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[395] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[396] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[397] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[398] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[399] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[400] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a[399] %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
yem_a_scraped <- yem_a %>%
map_df(., possibly(scrape_page, character(0), quiet = FALSE))
