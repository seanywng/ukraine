pull(body)
rw %>%
filter(id ==
tf_idf %>%
filter(source == "ACLED" & stem == "lgbt") %>%
sample_n(1) %>%
pull(id)) %>%
pull(body)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
`%out%` <- Negate(`%in%`)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]"))
ukr_links <- read_csv("./data/reliefweb_ukr_links.csv") %>%
rename(url = value) %>%
mutate(id = row_number())
# This is the list of Spanish and French links
to_remove <- read_csv("./data/links_to_remove.csv") %>%
rename(url = value) %>%
pull(url)
rw <- read_csv("./data/scraped_full_20230101_20220101.csv") %>%
mutate(date = dmy(date)) %>%
left_join(ukr_links, by = c("link" = "url")) %>%
filter(link %out% to_remove) %>%
select(-link) %>%
mutate(theme = str_replace_all(theme, "\n", ",")) %>%
mutate(agriculture = ifelse(str_detect(theme, "Agriculture"), 1, 0),
cccm = ifelse(str_detect(theme, "Camp Coordination and Camp Management"), 1, 0),
cca = ifelse(str_detect(theme, "Climate Change and Environment"), 1, 0),
contributions = ifelse(str_detect(theme, "Contributions"), 1, 0),
coordination = ifelse(str_detect(theme, "Coordination"), 1, 0),
disaster_management = ifelse(str_detect(theme, "Disaster Management"), 1, 0),
education = ifelse(str_detect(theme, "Education"), 1, 0),
food_nutrition = ifelse(str_detect(theme, "Food and Nutrition"), 1, 0),
gender = ifelse(str_detect(theme, "Gender"), 1, 0),
health = ifelse(str_detect(theme, "Health"), 1, 0),
hiv_aids = ifelse(str_detect(theme, "HIV/Aids"), 1, 0),
financing = ifelse(str_detect(theme, "Humanitarian Financing"), 1, 0),
logs_telecoms = ifelse(str_detect(theme, "Logistics and Telecommunications"), 1, 0),
mine_action = ifelse(str_detect(theme, "Mine Action"), 1, 0),
peacebuiling = ifelse(str_detect(theme, "Peacekeeping and Peacebuilding"), 1, 0),
protection_human_rights = ifelse(str_detect(theme, "Protection and Human Rights"), 1, 0),
recovery = ifelse(str_detect(theme, "Recovery and Reconstruction"), 1, 0),
security = ifelse(str_detect(theme, "Safety and Security"), 1, 0),
shelter_nfi = ifelse(str_detect(theme, "Shelter and Non-Food Items"), 1, 0),
wash = ifelse(str_detect(theme, "Water Sanitation Hygiene"), 1, 0))
words <- rw %>%
select(id, body) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(str_detect(word, "[a-z]")) %>%
mutate(word = str_remove_all(word, "'")) %>%
mutate(stem = wordStem(word, language = "porter")) %>%
filter(stem %out% c("de", "des", "la", "las", "le", "les",
"en", "el", "http", "se", "ses")) %>%
mutate(stem = recode(stem,
"ukraine’" = "ukrain")) %>%
filter(nchar(stem) < 20)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]"))
word_pairs %>%
arrange(desc(n))
word_pairs %>%
filter(n >= 200) %>%
arrange(desc(n))
word_pairs %>%
filter(n >= 500) %>%
arrange(desc(n))
word_pairs %>%
filter(n >= 800) %>%
arrange(desc(n))
word_pairs %>%
filter(n >= 700) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "lgl") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
word_pairs %>%
filter(!str_detect(item1, "ukraine|ukrainian") &
!str_detect(item2, "ukraine|ukrainian")) %>%
filter(n >= 700) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "lgl") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
word_pairs %>%
filter(!str_detect(item1, "ukraine|ukrainian") &
!str_detect(item2, "ukraine|ukrainian"))
word_pairs %>%
filter(!str_detect(item1, "ukraine|ukrainian") &
!str_detect(item2, "ukraine|ukrainian")) %>%
filter(n >= 700)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(!str_detect(item1, "ukraine|ukrainian") &
!str_detect(item2, "ukraine|ukrainian")) %>%
filter(n >= 700)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "lgl") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
word_pairs
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
#filter(!str_detect(item1, "ukraine|ukrainian") &
#         !str_detect(item2, "ukraine|ukrainian")) %>%
filter(n >= 800)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
#filter(!str_detect(item1, "ukraine|ukrainian") &
#         !str_detect(item2, "ukraine|ukrainian")) %>%
filter(n >= 700)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
words <- rw %>%
select(id, body) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(str_detect(word, "[a-z]")) %>%
mutate(word = str_remove_all(word, "'")) %>%
mutate(stem = wordStem(word, language = "porter")) %>%
filter(stem %out% c("de", "des", "la", "las", "le", "les",
"en", "el", "http", "se", "ses")) %>%
filter(!str_detect(item1, "ukraine|ukrainian") &
!str_detect(item2, "ukraine|ukrainian")) %>%
mutate(stem = recode(stem,
"ukraine’" = "ukrain")) %>%
filter(nchar(stem) < 20)
words <- rw %>%
select(id, body) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(str_detect(word, "[a-z]")) %>%
mutate(word = str_remove_all(word, "'")) %>%
mutate(stem = wordStem(word, language = "porter")) %>%
filter(stem %out% c("de", "des", "la", "las", "le", "les",
"en", "el", "http", "se", "ses")) %>%
filter(!str_detect(word, "ukraine|ukrainian")) %>%
mutate(stem = recode(stem,
"ukraine’" = "ukrain")) %>%
filter(nchar(stem) < 20)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n >= 700)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
words <- rw %>%
select(id, body) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(str_detect(word, "[a-z]")) %>%
mutate(word = str_remove_all(word, "'")) %>%
mutate(stem = wordStem(word, language = "porter")) %>%
filter(stem %out% c("de", "des", "la", "las", "le", "les",
"en", "el", "http", "se", "ses")) %>%
filter(!str_detect(word, "ukraine|ukrainian|people|humanitarian|support")) %>%
mutate(stem = recode(stem,
"ukraine’" = "ukrain")) %>%
filter(nchar(stem) < 20)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n >= 600)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
words <- rw %>%
select(id, body) %>%
unnest_tokens(word, body) %>%
count(id, word, sort = TRUE) %>%
anti_join(stop_words, by = "word") %>%
filter(str_detect(word, "[a-z]")) %>%
mutate(word = str_remove_all(word, "'")) %>%
mutate(stem = wordStem(word, language = "porter")) %>%
filter(stem %out% c("de", "des", "la", "las", "le", "les",
"en", "el", "http", "se", "ses")) %>%
filter(!str_detect(word, "ukraine|ukrainian|people|humanitarian|support|including|country")) %>%
mutate(stem = recode(stem,
"ukraine’" = "ukrain")) %>%
filter(nchar(stem) < 20)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n >= 600)
word_pairs <- words %>%
pairwise_count(word, id, sort = TRUE, upper = FALSE) %>%
filter(str_detect(item1, "[a-z]") & str_detect(item2, "[a-z]")) %>%
filter(n >= 500)
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
word_pairs %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "lgl") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "darkred") +
geom_node_point(size = 2) +
geom_node_text(aes(label = name), repel = TRUE, size = 3,
point.padding = unit(0.2, "lines")) +
theme_void()
create_bigrams <- function(tbl) {
bigrams_raw <- tbl %>%
select(id, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
bigrams_sep <- bigrams_raw %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<"))
bigram_counts <- bigrams_sep %>% count(word1, word2, sort = TRUE)
bigrams <- bigrams_sep %>%
unite(bigram, word1, word2, sep = " ")
tf_idf_bi <- bigrams %>%
count(id, bigram) %>%
bind_tf_idf(bigram, id, n) %>%
arrange(desc(tf_idf))
}
create_bigrams(rw)
set.seed(2023)
network_graph <- bigrams %>%
filter(bigram %out% c("million people",
"internally displaced",
"united nations",
"human rights",
"humanitarian assistance",
"february 2022")) %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 50) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .3) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "stress") +
geom_edge_link(aes(alpha = correlation),
colour = "blue",
check_overlap = TRUE) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "blue", alpha = .1) +
geom_node_text(aes(label = name), size = 2,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of Reliefweb bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: https://reliefweb.int/")
create_bigrams(rw)
network_graph <- bigrams %>%
filter(bigram %out% c("million people",
"internally displaced",
"united nations",
"human rights",
"humanitarian assistance",
"february 2022")) %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 50) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .3) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "stress") +
geom_edge_link(aes(alpha = correlation),
colour = "blue",
check_overlap = TRUE) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "blue", alpha = .1) +
geom_node_text(aes(label = name), size = 2,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of Reliefweb bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: https://reliefweb.int/")
bigrams_raw <- tbl %>%
select(id, body) %>%
unnest_tokens(bigram, body, token = "ngrams", n = 2) %>%
filter(!is.na(bigram))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(tidymodels)
library(broom)
library(ggraph)
library(tidylo)
library(widyr)
library(janitor)
library(lubridate)
library(SnowballC)
library(magrittr)
library(patchwork)
library(profvis)
`%out%` <- Negate(`%in%`)
library(scales)
library(plotly)
clean_acled <- function(tbl){
tbl %>%
filter(country == "Ukraine") %>%
mutate(inter_type = interaction,
inter_type = recode_factor(inter_type,
`10` = "SOLE	MILITARY ACTION",
`11` = "MILITARY VERSUS MILITARY",
`12` = "MILITARY VERSUS REBELS",
`13` = "MILITARY VERSUS POLITICAL MILITIA",
`14` = "MILITARY VERSUS COMMUNAL MILITIA",
`15` = "MILITARY VERSUS RIOTERS",
`16` = "MILITARY VERSUS PROTESTERS",
`17` = "MILITARY VERSUS CIVILIANS",
`18` = "MILITARY VERSUS OTHER",
`20` = "SOLE REBEL ACTION",
`22` = "REBELS VERSUS REBELS",
`23` = "REBELS	VERSUS POLITICAL MILIITA ",
`24` = "REBELS VERSUS COMMUNAL MILITIA",
`25` = "REBELS VERSUS RIOTERS",
`26` = "REBELS VERSUS PROTESTERS ",
`27` = "REBELS VERSUS CIVILIANS",
`28` = "REBELS VERSUS OTHERS",
`30` = "SOLE POLITICAL MILITIA ACTION",
`33` = "POLITICAL MILITIA VERSUS POLITICAL	MILITIA",
`34` = "POLITICAL MILITIA VERSUS COMMUNAL	MILITIA",
`35` = "POLITICAL MILITIA VERSUS RIOTERS",
`36` = "POLITICAL MILITIA VERSUS PROTESTERS",
`37` = "POLITICAL MILITIA VERSUS CIVILIANS",
`38` = "POLITICAL MILITIA VERSUS OTHERS",
`40` = "SOLE COMMUNAL MILITIA ACTION",
`44` = "COMMUNAL MILITIA VERSUS COMMUNAL MILITIA",
`45` = "COMMUNAL MILITIA VERSUS RIOTERS",
`46` = "COMMUNAL	MILITIA	VERSUS PROTESTERS ",
`47` = "COMMUNAL MILITIA VERSUS CIVILIANS",
`48` = "COMMUNAL MILITIA VERSUS OTHER",
`50` = "SOLE RIOTER ACTION",
`55` = "RIOTERS VERSUS RIOTERS",
`56` = "RIOTERS VERSUS PROTESTERS",
`57` = "RIOTERS VERSUS CIVILIANS",
`58` = "RIOTERS VERSUS OTHERS",
`60` = "SOLE PROTESTER ACTION",
`66` = "PROTESTERS VERSUS PROTESTERS",
`67` = "PROTESTERS VERSUS CIVILIANS",
`68` = "PROTESTERS VERSUS OTHER",
`78` = "OTHER ACTOR VERSUS CIVILIANS",
`80` = "SOLE OTHER ACTION"),
inter_type = tolower(str_trim(str_replace_all(inter_type, "[\\r\\n\\t]+", " ")))) %>%
mutate(event_date = dmy(event_date)) %>%
mutate(has_fatalities = ifelse(fatalities > 0, TRUE, FALSE)) %>%
mutate(month = lubridate::month(event_date, label = TRUE)) %>%
# Unclear if this works for Ukraine
mutate(non_combatant = case_when(event_type == "Violence against civilians" ~ TRUE,
str_detect(inter_type, "civilian|protester") ~ TRUE,
str_detect(notes, "civilian|protester|villager") ~ TRUE,
TRUE ~ FALSE)) %>%
rename(id = data_id)
}
acled <- read_csv("./data/2014-01-01-2023-01-05-Russia-Ukraine_acled.csv") %>%
clean_acled() %>%
# Moving the date filter out of the cleanin function
filter(event_date >= "2022-01-01" & event_date < "2023-01-01")
acled_bigrams <- acled %>%
select(id, notes) %>%
unnest_tokens(bigram, notes, token = "ngrams", n = 2) %>%
filter(!is.na(bigram)) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word & (nchar(word1) < 20)) %>%
filter(!word2 %in% stop_words$word & (nchar(word2) < 20)) %>%
filter(str_detect(word1, "[a-z]") & !str_detect(word1, "<")) %>%
filter(str_detect(word2, "[a-z]") & !str_detect(word2, "<")) %>%
unite(bigram, word1, word2, sep = " ")
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 3,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_fan(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .1) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
acled_bigram_graph <- acled_bigrams %>%
distinct(id, bigram) %>%
add_count(bigram) %>%
filter(n >= 30) %>%
pairwise_cor(bigram, id, sort = TRUE) %>%
filter(correlation >= .1) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = correlation),
colour = "slateblue",
check_overlap = TRUE,
width = .15) +
scale_alpha_continuous(range = c(.1, .4)) +
geom_node_point(colour = "black", alpha = .1, size = .5) +
geom_node_text(aes(label = name), size = 1,
vjust = 1, hjust = 1,
check_overlap = TRUE) +
theme(legend.position = "none") +
labs(title = "Network graphs of ACLED bigrams related to the Ukraine conflict in 2022",
subtitle = "Data source: ACLED, www.acleddata.com")
ggsave("./plots/acled_network_graph_fr.png", acled_bigram_graph,
width = 42, height = 29.7, units = "cm", dpi = 500)
